// This file was auto-generated by prisma-generator-typescript-interfaces

export type Role = "SCRUM_MASTER" | "USER";

export type NotificationType = "GameStarted" | "Invitation";

export interface Account {
  id: string;
  userId: string;
  type: string;
  provider: string;
  providerAccountId: string;
  refresh_token: string | null;
  access_token: string | null;
  expires_at: number | null;
  token_type: string | null;
  scope: string | null;
  id_token: string | null;
  session_state: string | null;
  refresh_token_expires_in: number | null;
  user?: User;
}

export interface Session {
  id: string;
  sessionToken: string;
  userId: string;
  expires: Date;
  user?: User;
}

export interface Organization {
  id: string;
  name: string;
  createdAt: Date;
}

export interface User {
  id: string;
  name: string | null;
  email: string | null;
  emailVerified: Date | null;
  image: string | null;
  accounts?: Account[];
  Game?: Game[];
  invitations?: Invitation[];
  notifications?: Notification[];
  rooms?: RoomUser[];
  sessions?: Session[];
  votes?: Vote[];
}

export interface VerificationToken {
  identifier: string;
  token: string;
  expires: Date;
}

export interface Room {
  id: string;
  name: string;
  createdAt: Date;
  games?: Game[];
  invitations?: Invitation[];
  users?: RoomUser[];
}

export interface RoomUser {
  userId: string;
  roomId: string;
  role: Role;
  joinedAt: Date;
  room?: Room;
  user?: User;
}

export interface Invitation {
  id: string;
  roomId: string;
  email: string;
  token: string;
  invitedById: string;
  accepted: boolean;
  createdAt: Date;
  acceptedAt: Date | null;
  invitedBy?: User;
  room?: Room;
}

export interface Notification {
  id: string;
  userId: string;
  type: NotificationType;
  message: string;
  data: JsonValue | null;
  read: boolean;
  createdAt: Date;
  user?: User;
}

export interface Game {
  id: string;
  roomId: string;
  scrumMasterId: string;
  createdAt: Date;
  endedAt: Date | null;
  room?: Room;
  scrumMaster?: User;
  votes?: Vote[];
}

export interface Vote {
  id: number;
  gameId: string;
  userId: string;
  value: number;
  game?: Game;
  user?: User;
}

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;
