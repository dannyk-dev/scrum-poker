// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    access_token             String? @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    rooms        RoomUser[]
  votes        Vote[]
  invitations  Invitation[]  @relation("UserInvites")
  notifications Notification[]

    Game Game[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime     @default(now())
  users         RoomUser[]
  games         Game[]
  invitations   Invitation[]
}

model RoomUser {
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  room         Room    @relation(fields: [roomId], references: [id])
  roomId       String
  role         Role    @default(USER)
  joinedAt     DateTime @default(now())

  @@id([roomId, userId])
}

model Invitation {
  id            String       @id @default(cuid())
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  email         String
  token         String    @unique
  invitedBy     User      @relation("UserInvites", fields: [invitedById], references: [id])
  invitedById   String
  accepted      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  acceptedAt    DateTime?
}

model Notification {
  id          String              @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  type        NotificationType
  message     String
  data        Json?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
}

model Game {
  id            String       @id @default(cuid())
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        String
  scrumMaster   User      @relation(fields: [scrumMasterId], references: [id])
  scrumMasterId String
  createdAt     DateTime  @default(now())
  votes         Vote[]
}

model Vote {
  id       Int      @id @default(autoincrement())
  game     Game     @relation(fields: [gameId], references: [id])
  gameId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  value    Int
}

enum Role {
  SCRUM_MASTER
  USER
}

enum NotificationType {
  GameStarted
  Invitation
}
