generator client {
  provider = "prisma-client-js"
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_relation_fkey")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_relation_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model Organization {
  id               String   @id @default(cuid())
  name             String
  atlassianCloudId String   @unique // e.g. "d1234-...-abcd" from Atlassian accessible-resources
  baseUrl          String?  // e.g. https://yourco.atlassian.net
  avatarUrl        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  users        UserOrganization[]
  rooms        Room[]
  invitations  Invitation[]
}

model UserOrganization {
  organizationId String
  userId         String
  role           OrgRole   @default(MEMBER)
  joinedAt       DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([organizationId, userId])
  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Game          Game[]
  invitations   Invitation[]   @relation("UserInvites")
  notifications Notification[]
  rooms         RoomUser[]
  sessions      Session[]
  votes         Vote[]

  organizations UserOrganization[]
  @@index([id, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  games       Game[]
  invitations Invitation[]
  users       RoomUser[]
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model RoomUser {
  userId   String
  roomId   String
  role     Role     @default(USER)
  joinedAt DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], map: "RoomUser_userId_relation_fkey")

  @@id([roomId, userId])
  @@index([userId], map: "RoomUser_userId_fkey")
}

model Invitation {
  id          String    @id @default(cuid())
  roomId      String
  email       String
  token       String    @unique
  invitedById String
  accepted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?
  invitedBy   User      @relation("UserInvites", fields: [invitedById], references: [id], map: "Invitation_invitedBy_relation_fkey")
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Invitation_roomId_relation_fkey")

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([invitedById], map: "Invitation_invitedById_fkey")
  @@index([roomId], map: "Invitation_roomId_fkey")
    @@index([organizationId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], map: "Notification_userId_relation_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model Game {
  id            String    @id @default(cuid())
  roomId        String
  scrumMasterId String
  createdAt     DateTime  @default(now())
  endedAt       DateTime?
  room          Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, map: "Game_roomId_relation_fkey")
  scrumMaster   User      @relation(fields: [scrumMasterId], references: [id], map: "Game_scrumMaster_relation_fkey")
  votes         Vote[]

  @@index([roomId], map: "Game_roomId_fkey")
  @@index([scrumMasterId], map: "Game_scrumMasterId_fkey")
}

model Vote {
  id     Int    @id @default(autoincrement())
  gameId String
  userId String
  value  Int
  game   Game   @relation(fields: [gameId], references: [id])
  user   User   @relation(fields: [userId], references: [id], map: "Vote_userId_relation_fkey")

  @@unique([gameId, userId])
  @@index([userId], map: "Vote_userId_fkey")
}

enum Role {
  SCRUM_MASTER
  USER
}

enum NotificationType {
  GameStarted
  Invitation
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}
